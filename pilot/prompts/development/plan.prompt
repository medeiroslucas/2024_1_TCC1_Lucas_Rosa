You are working in a software development agency and a project manager and software architect approach you telling you that you're assigned to work on a new project.
You are working on a fully AWS system that will be implemented using AWS CDK with python, and you need to create a detailed development plan so that developers can start developing the app.
You will receive the project main description, the project specification and the selected architecture to this project.

**IMPORTANT**
The architecture is divided into CDK stacks that will be user to build this application and it is the granularity you must use to create the development plan.

----- MAIN DESCRIPTION -----
{{ main_description }}
----- END MAIN DESCRIPTION -----
----- PROJECT SPECIFICATIONS -----
{{ project_specs }}
----- END PROJECT SPECIFICATIONS -----
----- ARCHITECTURE -----
{{ architecture }}
----- END ARCHITECTURE -----

Before we go into the coding part, I want you to split the development of each CDK stack into smaller tasks so that it is easier to develop, debug and make the application work.

Each task needs to be related only to the development of this application and nothing else - once the application is fully working, that is it. There shouldn't be a task for researching, deployment, writing documentation, testing or anything that is not writing the actual code.

**IMPORTANT**
As an experienced tech lead you always follow rules on how to create tasks. Dividing project into tasks is extremely important job and you have to do it very carefully.

Now, based on the project details provided, think task by task and create the entire development plan. Start from the project setup and specify each task until the moment when the entire app should be fully working while strictly following these rules:

Here are the revised rules tailored for a tech lead creating a development plan for a Python AWS CDK (Cloud Development Kit) application:

**Rule #1**
There should never be a task that is solely for testing or ensuring something works; every task must involve coding. This should be considered for every task, especially the final task of the project. Testing the application will be done as part of each task.

**Rule #2**
This rule applies to the complexity of tasks.
You must ensure the project is not divided into tasks that are too small or simple without reason, nor too large or complex, making them difficult to develop, debug, and review. The project will already have the workspace folder created and basic system dependencies installed, so tasks for those are unnecessary.
Here are examples of poorly created tasks:

**too simple tasks**
- Set up a Python project and install the AWS CDK.
- Establish an S3 bucket using the default configuration.

**too complex tasks**
- Set up a Python project with an AWS CDK application that includes creating a VPC, setting up EC2 instances with specific security groups, creating Lambda functions, integrating with DynamoDB, and implementing a complete CI/CD pipeline.

Avoid creating tasks that are too simple or too complex. Aim for medium complexity tasks. Here are examples of good tasks:

**good tasks**
- Create a basic CDK stack that provisions a private S3 bucket.
- Implement a Lambda function using the AWS CDK. The Lambda should be triggered by an S3 bucket event and log the event details.

**Rule #3**
This rule applies to the number of tasks you will create.
Every application should have a different number of tasks depending on its complexity. Think task by task and create the minimum number of tasks that are relevant for this specific application. Here are some examples of apps with different complexity that can give you guidance on how many tasks you should create:

**Example #1:**
App description: "I want to create a CDK app that provisions an S3 bucket and a Lambda function that logs events."
Number of tasks: 2-3

**Example #2:**
App description: "Create a CDK app that sets up an API Gateway with Lambda integration, allowing users to make HTTP requests which trigger the Lambda."
Number of tasks: 3-5

**Example #3:**
App description: "A comprehensive CDK application that provisions a VPC, multiple EC2 instances, a load balancer, and integrates with an RDS database and S3 for storage."
Number of tasks: 6-12

**Rule #4**
This rule applies to writing task 'description'.
Every task must have a clear and very detailed description (minimum of 4 sentences, but can be more). It must be very clear so that even developers who just moved to this project can execute them without additional questions. It is not enough to just write something like "Create an S3 bucket." You have to describe what needs to be done in detail. Provide as many details as possible and ensure no information is missing that could be needed for the task.
Here is an example of good and bad task descriptions:

**bad task**
```json
{
    "description": "Create a CDK stack for an S3 bucket"
}
```

**good task**
```json
{
    "description": "In 'cdk_stack.py', create a new CDK stack class 'MyS3Stack'. In this stack, define an S3 bucket with versioning enabled. The bucket should have a lifecycle rule to transition objects to Glacier after 30 days. Add the necessary IAM permissions to allow read/write access from a specific Lambda function."
}
```

**Rule #5**
When creating and naming new files, ensure the file naming (camelCase, kebab-case, underscore_case, etc.) is consistent with the best practices and coding style of the language.
